From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Sun, 29 May 2022 23:52:23 +0300
Subject: [PATCH] lifecycles


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 8bbb24eb8dae31851698457aef608aedca2a4fc3..b7b7b100824eb8a72b9f50e42d3f0133c1dff54c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1169,6 +1169,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     protected void runServer() {
         try {
             long serverStartTime = Util.getNanos(); // Paper
+			net.drf.drfpaper.lifecycle.ServerLifecycles.SERVER_STARTING.invoker().starting(net.drf.drfpaper.DRFPaper.INSTANCE.getPreServer().get()); // DRFPaper - lifecycles
             if (this.initServer()) {
                 this.nextTickTime = Util.getMillis();
                 this.status.setDescription(new TextComponent(this.motd));
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 257c94f7c1cb00c9a91ab82e311dfd8eca29c538..c2b225e1d6ed69c3715fbf8e3a1522e5911b0e27 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -285,7 +285,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
         // CraftBukkit start
         // this.setPlayerList(new DedicatedPlayerList(this, this.registryHolder, this.playerDataStorage)); // Spigot - moved up
+		net.drf.drfpaper.lifecycle.PluginLifecycles.PLUGINS_LOADING_START.invoker().pluginsLoadingStart(net.drf.drfpaper.lifecycle.PluginLifecycles.PluginLoadingPhase.DEDICATED_SERVER); // DRFPaper - lifecycles
         server.loadPlugins();
+		net.drf.drfpaper.lifecycle.PluginLifecycles.PLUGINS_LOADING_END.invoker().pluginsLoadingEnd(net.drf.drfpaper.lifecycle.PluginLifecycles.PluginLoadingPhase.DEDICATED_SERVER); // DRFPaper - lifecycles
         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
         // CraftBukkit end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d32f82b13feed3909ede1da4d443449d5ac091ba..b387e76b1251115a9acbf9a510d68df30908a113 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -307,6 +307,7 @@ public final class CraftServer implements Server {
         this.structureManager = new CraftStructureManager(console.getStructureManager());
 
         Bukkit.setServer(this);
+		net.drf.drfpaper.lifecycle.APILifecycles.BUKKIT_API_INITIALIZED.invoker().initialized(this); // DRFPaper - lifecycles.
 
         // Register all the Enchantments and PotionTypes now so we can stop new registration immediately after
         Enchantments.SHARPNESS.getClass();
@@ -420,6 +421,11 @@ public final class CraftServer implements Server {
             for (Plugin plugin : plugins) {
                 try {
                     String message = String.format("Loading %s", plugin.getDescription().getFullName());
+					// DRFPaper start - Lifecycles
+					final net.drf.event.Result result = net.drf.drfpaper.lifecycle.PluginLifecycles.PLUGIN_LOADING.invoker().pluginLoading(plugins, plugin, pluginFolder);
+					if (result == net.drf.event.Result.PASS) continue;
+					else if (result == net.drf.event.Result.FAIL) break;
+					// DRFPaper end
                     plugin.getLogger().info(message);
                     plugin.onLoad();
                 } catch (Throwable ex) {
@@ -461,6 +467,7 @@ public final class CraftServer implements Server {
     // Paper end
 
     public void enablePlugins(PluginLoadOrder type) {
+		net.drf.drfpaper.lifecycle.PluginLifecycles.PLUGINS_ENABLING_START.invoker().pluginsEnablingStart(type); // DRFPaper - lifecycles
         if (type == PluginLoadOrder.STARTUP) {
             this.helpMap.clear();
             this.helpMap.initializeGeneralTopics();
@@ -488,6 +495,7 @@ public final class CraftServer implements Server {
             this.helpMap.initializeCommands();
             this.syncCommands();
         }
+		net.drf.drfpaper.lifecycle.PluginLifecycles.PLUGINS_ENABLING_END.invoker().pluginsEnablingEnd(type); // DRFPaper - lifecycles
     }
 
     public void disablePlugins() {
@@ -1011,7 +1019,9 @@ public final class CraftServer implements Server {
             ));
             if (console.isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread(worker.getThread(), "still running"); // Paper
         }
+		net.drf.drfpaper.lifecycle.PluginLifecycles.PLUGINS_LOADING_START.invoker().pluginsLoadingStart(net.drf.drfpaper.lifecycle.PluginLifecycles.PluginLoadingPhase.RELOAD); // DRFPaper - lifecycles
         this.loadPlugins();
+		net.drf.drfpaper.lifecycle.PluginLifecycles.PLUGINS_LOADING_END.invoker().pluginsLoadingEnd(net.drf.drfpaper.lifecycle.PluginLifecycles.PluginLoadingPhase.RELOAD); // DRFPaper - lifecycles
         this.enablePlugins(PluginLoadOrder.STARTUP);
         this.enablePlugins(PluginLoadOrder.POSTWORLD);
         this.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.RELOAD));

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Sun, 29 May 2022 23:51:25 +0300
Subject: [PATCH] lifecycles


diff --git a/src/main/java/net/drf/drfpaper/lifecycle/PluginLifecycles.java b/src/main/java/net/drf/drfpaper/lifecycle/PluginLifecycles.java
new file mode 100644
index 0000000000000000000000000000000000000000..d8780079e59b68a3a7b89e6fda1f1ba535ba67d2
--- /dev/null
+++ b/src/main/java/net/drf/drfpaper/lifecycle/PluginLifecycles.java
@@ -0,0 +1,38 @@
+package net.drf.drfpaper.lifecycle;
+
+import java.io.File;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+
+import net.drf.event.Event;
+import net.drf.event.EventFactory;
+import net.drf.event.Result;
+import org.bukkit.plugin.Plugin;
+
+public final class PluginLifecycles {
+	private PluginLifecycles() {}
+
+	public static final Event<PluginsLoading> PLUGINS_LOADING = EventFactory.createArrayBacked(PluginsLoading.class, (listeners) -> (resultPlugin, dependencies, softDependencies) -> {
+		for (PluginsLoading listener : listeners) {
+			listener.pluginsLoading(resultPlugin, dependencies, softDependencies);
+		}
+	});
+
+	public static final Event<PluginLoading> PLUGIN_LOADING = EventFactory.createArrayBacked(PluginLoading.class, (listeners) -> (loadingPlugins, plugin, pluginFolder) -> {
+		for (PluginLoading listener : listeners) {
+			Result result = listener.pluginLoading(loadingPlugins, plugin, pluginFolder);
+			if (result == Result.PASS || result == Result.FAIL)
+				return Result.PASS;
+		}
+		return Result.SUCCESS;
+	});
+
+	public interface PluginsLoading {
+		void pluginsLoading(List<Plugin> resultPlugin, Map<String, Collection<String>> dependencies, Map<String, Collection<String>> softDependencies);
+	}
+
+	public interface PluginLoading {
+		Result pluginLoading(Plugin[] loadingPlugins, Plugin plugin, File pluginFolder);
+	}
+}
diff --git a/src/main/java/net/drf/drfpaper/lifecycle/ServerLifecycles.java b/src/main/java/net/drf/drfpaper/lifecycle/ServerLifecycles.java
new file mode 100644
index 0000000000000000000000000000000000000000..2267bf79acce7bf46a908ebaa6d8f2201dd6b575
--- /dev/null
+++ b/src/main/java/net/drf/drfpaper/lifecycle/ServerLifecycles.java
@@ -0,0 +1,18 @@
+package net.drf.drfpaper.lifecycle;
+
+import net.drf.event.Event;
+import net.drf.event.EventFactory;
+
+public final class ServerLifecycles {
+	private ServerLifecycles() {}
+
+	public static final Event<ServerStarting> SERVER_STARTING = EventFactory.createArrayBacked(ServerStarting.class, (listeners) -> () -> {
+		for (ServerStarting listener : listeners) {
+			listener.starting();
+		}
+	});
+
+	public interface ServerStarting {
+		void starting();
+	}
+}
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index bab8bb3a52cdeef5f7052d4e3f404c42f37d117d..15dbbc5b5a3b077d3176322454fb92f99e299198 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -379,8 +379,10 @@ public final class SimplePluginManager implements PluginManager {
                 }
             }
         }
-
+		// DRFPaper start - Lifecycles
+		net.drf.drfpaper.lifecycle.PluginLifecycles.PLUGINS_LOADING.invoker().pluginsLoading(result, dependencies, softDependencies);
         return result.toArray(new Plugin[result.size()]);
+		// DRFPaper end
     }
 
     /**

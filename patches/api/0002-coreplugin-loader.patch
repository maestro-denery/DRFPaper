From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Tue, 24 May 2022 12:50:08 +0300
Subject: [PATCH] coreplugin-loader


diff --git a/src/main/java/net/drf/drfpaper/DRFPaper.java b/src/main/java/net/drf/drfpaper/DRFPaper.java
new file mode 100644
index 0000000000000000000000000000000000000000..7be58e7da809e3796dcdd68731d09559ab8fd8b4
--- /dev/null
+++ b/src/main/java/net/drf/drfpaper/DRFPaper.java
@@ -0,0 +1,27 @@
+package net.drf.drfpaper;
+
+import net.drf.drfpaper.loader.CorePluginLoader;
+import org.jetbrains.annotations.NotNull;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A main DRFPaper class containing API info, accesses to APIs and info shared between plugins.
+ */
+public final class DRFPaper {
+	private DRFPaper() {}
+	public static final DRFPaper INSTANCE = new DRFPaper();
+	public static final Logger logger = LoggerFactory.getLogger("DRFPaper");
+	private CorePluginLoader corePluginLoader;
+
+	public void setCorePluginLoader(@NotNull final CorePluginLoader corePluginLoader) {
+		if (this.corePluginLoader != null)
+			throw new UnsupportedOperationException("Cannot redefine core plugin loader twice!");
+		this.corePluginLoader = corePluginLoader;
+	}
+
+	@NotNull
+	public CorePluginLoader getCorePluginLoader() {
+		return corePluginLoader;
+	}
+}
diff --git a/src/main/java/net/drf/drfpaper/loader/CorePlugin.java b/src/main/java/net/drf/drfpaper/loader/CorePlugin.java
new file mode 100644
index 0000000000000000000000000000000000000000..f91076aae4ac5f380df1f4df57181efbcba8c8d7
--- /dev/null
+++ b/src/main/java/net/drf/drfpaper/loader/CorePlugin.java
@@ -0,0 +1,119 @@
+package net.drf.drfpaper.loader;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.URL;
+import java.net.URLConnection;
+
+import net.drf.drfpaper.DRFPaper;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public abstract class CorePlugin implements PluginLike {
+	private CorePluginLoader loader;
+	private CorePluginDescriptionFile description;
+	private File dataFolder;
+	private File pluginFile;
+	private ClassLoader classLoader;
+
+	final void init(
+			@NotNull final CorePluginLoader loader,
+			@NotNull final CorePluginDescriptionFile description,
+			@NotNull final File pluginFile,
+			@NotNull final File dataFolder,
+			@NotNull final ClassLoader classLoader
+	) {
+		this.loader = loader;
+		this.description = description;
+		this.pluginFile = pluginFile;
+		this.dataFolder = dataFolder;
+		this.classLoader = classLoader;
+	}
+
+	@Override
+	public void saveResource(@NotNull String resourcePath, boolean replace) {
+		if (resourcePath == null || resourcePath.equals("")) {
+			throw new IllegalArgumentException("ResourcePath cannot be null or empty");
+		}
+
+		resourcePath = resourcePath.replace('\\', '/');
+		InputStream in = getResource(resourcePath);
+		if (in == null) {
+			throw new IllegalArgumentException("The embedded resource '" + resourcePath + "' cannot be found in " + pluginFile);
+		}
+
+		File outFile = new File(dataFolder, resourcePath);
+		int lastIndex = resourcePath.lastIndexOf('/');
+		File outDir = new File(dataFolder, resourcePath.substring(0, lastIndex >= 0 ? lastIndex : 0));
+
+		if (!outDir.exists()) {
+			outDir.mkdirs();
+		}
+
+		try {
+			if (!outFile.exists() || replace) {
+				OutputStream out = new FileOutputStream(outFile);
+				byte[] buf = new byte[1024];
+				int len;
+				while ((len = in.read(buf)) > 0) {
+					out.write(buf, 0, len);
+				}
+				out.close();
+				in.close();
+			} else {
+				DRFPaper.logger.warn("Could not save " + outFile.getName() + " to " + outFile + " because " + outFile.getName() + " already exists.");
+			}
+		} catch (IOException ex) {
+			DRFPaper.logger.warn("Could not save " + outFile.getName() + " to " + outFile, ex);
+		}
+	}
+
+	@Override
+	public @Nullable InputStream getResource(@NotNull String filename) {
+		if (filename == null) {
+			throw new IllegalArgumentException("Filename cannot be null");
+		}
+
+		try {
+			URL url = classLoader.getResource(filename);
+
+			if (url == null) {
+				return null;
+			}
+
+			URLConnection connection = url.openConnection();
+			connection.setUseCaches(false);
+			return connection.getInputStream();
+		} catch (IOException ex) {
+			return null;
+		}
+	}
+
+	public CorePluginDescriptionFile getDescriptionFile() {
+		return description;
+	}
+
+	@Override
+	public final int hashCode() {
+		return getName().hashCode();
+	}
+
+	@Override
+	public final boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof CorePlugin))
+			return false;
+		return getName().equals(((CorePlugin) obj).getName());
+	}
+
+	@Override
+	public @NotNull String getName() {
+		return getDescriptionFile().getName();
+	}
+}
diff --git a/src/main/java/net/drf/drfpaper/loader/CorePluginDescriptionFile.java b/src/main/java/net/drf/drfpaper/loader/CorePluginDescriptionFile.java
new file mode 100644
index 0000000000000000000000000000000000000000..121d3c93e630cc2f19450c4f60540f07d48f7ab3
--- /dev/null
+++ b/src/main/java/net/drf/drfpaper/loader/CorePluginDescriptionFile.java
@@ -0,0 +1,42 @@
+package net.drf.drfpaper.loader;
+
+import java.io.Reader;
+import java.util.ArrayList;
+import java.util.List;
+
+import com.google.gson.FieldNamingPolicy;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents a simple JSON description file.
+ */
+public final class CorePluginDescriptionFile {
+	private CorePluginDescriptionFile() {}
+
+	private static final Gson CORE_PLUGIN_DESCRIPTION_GSON = new GsonBuilder()
+			.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
+			.setPrettyPrinting()
+			.create();
+
+	private String name;
+	private String main;
+	private final List<String> dependencies = new ArrayList<>();
+
+	public static CorePluginDescriptionFile from(@NotNull Reader reader) {
+		return CORE_PLUGIN_DESCRIPTION_GSON.fromJson(reader, CorePluginDescriptionFile.class);
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public String getMain() {
+		return main;
+	}
+
+	public List<String> getDependencies() {
+		return dependencies;
+	}
+}
diff --git a/src/main/java/net/drf/drfpaper/loader/CorePluginLoader.java b/src/main/java/net/drf/drfpaper/loader/CorePluginLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..d26e1b2c5d1b70f8fde298cae9746b83b478eb5e
--- /dev/null
+++ b/src/main/java/net/drf/drfpaper/loader/CorePluginLoader.java
@@ -0,0 +1,25 @@
+package net.drf.drfpaper.loader;
+
+import org.bukkit.plugin.InvalidPluginException;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.util.Collection;
+
+/**
+ * Represents a loader of core plugins. Generally useful for obtaining all loaded core plugins,
+ * unless you are trying to implement your own core plugin system.
+ */
+public interface CorePluginLoader {
+	@NotNull
+	CorePlugin load(@NotNull File file) throws InvalidPluginException;
+
+	@NotNull
+	CorePluginDescriptionFile getPluginDescription(@NotNull File file) throws InvalidCorePluginDescriptionException;
+
+	@NotNull
+	Collection<CorePlugin> getLoadedCorePlugins();
+
+	@NotNull
+	File getPluginsFolder();
+}
diff --git a/src/main/java/net/drf/drfpaper/loader/InvalidCorePluginDescriptionException.java b/src/main/java/net/drf/drfpaper/loader/InvalidCorePluginDescriptionException.java
new file mode 100644
index 0000000000000000000000000000000000000000..8d9d7a2a468b34c62cc3e0a6082a1ca4d94baa78
--- /dev/null
+++ b/src/main/java/net/drf/drfpaper/loader/InvalidCorePluginDescriptionException.java
@@ -0,0 +1,7 @@
+package net.drf.drfpaper.loader;
+
+public class InvalidCorePluginDescriptionException extends Exception {
+	public InvalidCorePluginDescriptionException(final Throwable cause) {
+		super("Invalid coreplugin.json", cause);
+	}
+}
diff --git a/src/main/java/net/drf/drfpaper/loader/PluginLike.java b/src/main/java/net/drf/drfpaper/loader/PluginLike.java
new file mode 100644
index 0000000000000000000000000000000000000000..a6ee8b1c782187213f9b1f207244b3cdf4b252b0
--- /dev/null
+++ b/src/main/java/net/drf/drfpaper/loader/PluginLike.java
@@ -0,0 +1,23 @@
+package net.drf.drfpaper.loader;
+
+import java.io.InputStream;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * An interface representing something "plugin-like" thing which can load, give its name, give and save resources.
+ * Actually, the only its implementations are Bukkit's {@link org.bukkit.plugin.Plugin} and DRFPaper's {@link CorePlugin},
+ * and it is created only for making additional abstraction over them.
+ */
+public interface PluginLike {
+	void onLoad();
+
+	void saveResource(@NotNull String resourcePath, boolean replace);
+
+	@NotNull
+	String getName();
+
+	@Nullable
+	InputStream getResource(@NotNull String filename);
+}
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index 34438b5362b0ba0949625d81e8371fe0d1f76fdf..5193b774f6fe940b95083a552107b0dfffcd9d1f 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.Nullable;
  * <p>
  * The use of {@link PluginBase} is recommended for actual Implementation
  */
-public interface Plugin extends TabExecutor {
+public interface Plugin extends TabExecutor, net.drf.drfpaper.loader.PluginLike { // DRFPaper - add PluginLike for abstraction over core plugins.
     /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
